# Build Stage
FROM node:21 as build-stage

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

# RUN npm run build
CMD ["npm", "run", "build"]


# Production Stage
FROM nginx:stable-alpine as production-stage

COPY --from=build-stage /app/.output /usr/share/nginx/html

COPY nginx.conf /etc/nginx/nginx.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]







# Step 1: Build Stage
# Use an official Node.js runtime as a parent image
# FROM node:21 as build-stage

# Set the working directory in the container
# WORKDIR /app

# Copy package.json and package-lock.json (or yarn.lock)
# COPY package*.json ./

# Install project dependencies
# RUN npm install

# Copy project files and folders to the current working directory (i.e. 'app' folder)
# COPY . .

# Build the app for production
# RUN npm run build


# Run the app for development
# RUN npm run dev

# CMD ["npm", "run", "build"]




# FROM node:21
# WORKDIR /app
# RUN rm -rf node_modules package-lock.json
# COPY . ./
# RUN npm install
# RUN npm run build
# CMD ["npm", "run", "build" , "&&", "npm", "run", "dev"]






# Step 2: Production Stage
# Use an official Nginx image as a base for the production stage
# FROM nginx:stable-alpine as production-stage

# Copy built assets from the build stage
# COPY --from=build-stage /app/.nuxt /usr/share/nginx/html

# Copy Nginx configuration file
# COPY nginx.conf /etc/nginx/nginx.conf

# Expose port 80 to the outside once the container has launched
# EXPOSE 80

# Define the command to run your app using CMD which defines your runtime
# CMD ["nginx", "-g", "daemon off;"]

